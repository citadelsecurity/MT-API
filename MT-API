if getgenv().MTAPIMutex ~= nil then
    return
end

-- Detect the exploit environment type.
local function detectExploitType()
    if is_protosmasher_caller ~= nil then
        return 0  -- Protosmasher environment.
    end
    if elysianexecute ~= nil then
        return 1  -- ElysianExecute environment.
    end
    if fullaccess ~= nil then
        return 2  -- FullAccess environment (unsupported).
    end
    if Synapse ~= nil then
        return 3  -- Synapse environment.
    end
    return 4  -- Other environment.
end

-- Select the appropriate caller check function based on the exploit type.
local function getCallerChecker()
    local exploitType = detectExploitType()
    if exploitType == 0 then
        return is_protosmasher_caller
    end
    if exploitType == 1 or exploitType == 3 then
        return checkcaller
    end
    if exploitType == 2 then
        return IsLevel7
    end

    -- One final check
    return checkcaller or nil
end

if detectExploitType() == 2 then
    error("mt-api: Exploit not supported")
end

-- Hook storage tables.
local instanceGetHooks     = {}
local instanceSetHooks     = {}
local instanceCallHooks    = {}
local globalGetHooks       = {}
local globalSetHooks       = {}
local globalCallHooks      = {}
local propertyEmulatorMeta = {}
local propertyEmulatorVals = {}

local function setupMetaTableHooks()
    local exploitType   = detectExploitType()
    local callerChecker = getCallerChecker()
    local metaGame      = getrawmetatable(game)
    
    -- Make the metatable writable.
    if exploitType == 0 then
        make_writeable(metaGame)
    elseif exploitType == 2 then
        fullaccess(metaGame)
    else
        setreadonly(metaGame, false)
    end
    
    local originalIndex     = metaGame.__index
    local originalNewIndex  = metaGame.__newindex
    local originalNamecall  = metaGame.__namecall

    metaGame.__index = newcclosure(function(instance, key)
        if callerChecker() then
            return originalIndex(instance, key)
        end
        if instanceGetHooks[instance] and instanceGetHooks[instance][key] then
            local hookData = instanceGetHooks[instance][key]
            if hookData["IsCallback"] == true then
                return hookData["Value"](instance)
            else
                return hookData["Value"]
            end
        end
        if globalGetHooks[key] then
            local hookData = globalGetHooks[key]
            if hookData["IsCallback"] == true then
                return hookData["Value"](instance)
            else
                return hookData["Value"]
            end
        end
        if propertyEmulatorMeta[instance] and propertyEmulatorMeta[instance][key] then
            return propertyEmulatorVals[instance][key]
        end
        return originalIndex(instance, key)
    end)

    metaGame.__newindex = newcclosure(function(instance, key, value)
        if callerChecker() then
            return originalNewIndex(instance, key, value)
        end
        if instanceSetHooks[instance] and instanceSetHooks[instance][key] then
            local hookData = instanceSetHooks[instance][key]
            if hookData["Callback"] == nil then
                return
            else
                hookData["Callback"](instance, value)
                return
            end
        end
        if globalSetHooks[key] then
            local hookData = globalSetHooks[key]
            if hookData["Callback"] == nil then
                return
            else
                hookData["Callback"](instance, value)
                return
            end
        end
        if propertyEmulatorMeta[instance] and propertyEmulatorMeta[instance][key] then
            local expectedType = propertyEmulatorMeta[instance][key]["Type"]
            if type(value) ~= expectedType then
                error("bad argument #3 to '" .. key .. "' (" .. expectedType .. " expected, got " .. type(value) .. ")")
            end
            propertyEmulatorVals[instance][key] = value
            return
        end
        return originalNewIndex(instance, key, value)
    end)

    metaGame.__namecall = newcclosure(function(instance, ...)
        local args       = {...}
        local methodName = getnamecallmethod()

        if callerChecker() then
            -- Instance Get Hook registration.
            if methodName == "AddGetHook" then
                if #args < 1 then
                    error("mt-api: Invalid argument count")
                end
                local hookKey     = args[1]
                local hookValue   = args[2]
                local isCallback  = args[3]
                if type(hookKey) ~= "string" then
                    error("mt-api: Invalid hook type")
                end
                if not instanceGetHooks[instance] then
                    instanceGetHooks[instance] = {}
                end
                if isCallback == true and type(hookValue) ~= "function" then
                    error("mt-api: Invalid callback function")
                end
                instanceGetHooks[instance][hookKey] = {Value = hookValue, IsCallback = isCallback}
                local removeHook = function()
                    instanceGetHooks[instance][hookKey] = nil
                end
                return {remove = removeHook, Remove = removeHook}
            end

            -- Global Get Hook registration.
            if methodName == "AddGlobalGetHook" then
                local hookKey    = args[1]
                local hookValue  = args[2]
                local isCallback = args[3]
                if type(hookKey) ~= "string" then
                    error("mt-api: Invalid hook type")
                end
                if isCallback == true and type(hookValue) ~= "function" then
                    error("mt-api: Invalid callback function")
                end
                globalGetHooks[hookKey] = {Value = hookValue, IsCallback = isCallback}
                local removeHook = function()
                    globalGetHooks[hookKey] = nil
                end
                return {remove = removeHook, Remove = removeHook}
            end

            -- Instance Set Hook registration.
            if methodName == "AddSetHook" then
                if #args < 1 then
                    error("mt-api: Invalid argument count")
                end
                local hookKey         = args[1]
                local callbackFunction = args[2]
                if type(hookKey) ~= "string" then
                    error("mt-api: Invalid hook type")
                end
                if not instanceSetHooks[instance] then
                    instanceSetHooks[instance] = {}
                end
                if type(callbackFunction) == "function" then
                    instanceSetHooks[instance][hookKey] = {Callback = callbackFunction}
                else
                    instanceSetHooks[instance][hookKey] = {Callback = nil}
                end
                local removeHook = function()
                    instanceSetHooks[instance][hookKey] = nil
                end
                return {remove = removeHook, Remove = removeHook}
            end

            -- Global Set Hook registration.
            if methodName == "AddGlobalSetHook" then
                if #args < 1 then
                    error("mt-api: Invalid argument count")
                end
                local hookKey         = args[1]
                local callbackFunction = args[2]
                if type(hookKey) ~= "string" then
                    error("mt-api: Invalid hook type")
                end
                if type(callbackFunction) == "function" then
                    globalSetHooks[hookKey] = {Callback = callbackFunction}
                else
                    globalSetHooks[hookKey] = {Callback = nil}
                end
                local removeHook = function()
                    globalSetHooks[hookKey] = nil
                end
                return {remove = removeHook, Remove = removeHook}
            end

            -- Instance Call Hook registration.
            if methodName == "AddCallHook" then
                if #args < 2 then
                    error("mt-api: Invalid argument count")
                end
                local hookKey         = args[1]
                local callbackFunction = args[2]
                if type(hookKey) ~= "string" then
                    error("mt-api: Invalid hook type")
                end
                if type(callbackFunction) ~= "function" then
                    error("mt-api: Invalid argument #2 (not function)")
                end
                if not instanceCallHooks[instance] then
                    instanceCallHooks[instance] = {}
                end
                instanceCallHooks[instance][hookKey] = {Callback = callbackFunction}
                local removeHook = function()
                    instanceCallHooks[instance][hookKey] = nil
                end
                return {remove = removeHook, Remove = removeHook}
            end

            -- Global Call Hook registration.
            if methodName == "AddGlobalCallHook" then
                if #args < 2 then
                    error("mt-api: Invalid argument count")
                end
                local hookKey         = args[1]
                local callbackFunction = args[2]
                if type(hookKey) ~= "string" then
                    error("mt-api: Invalid hook type")
                end
                if type(callbackFunction) ~= "function" then
                    error("mt-api: Invalid argument #2 (not function)")
                end
                globalCallHooks[hookKey] = {Callback = callbackFunction}
                local removeHook = function()
                    globalCallHooks[hookKey] = nil
                end
                return {remove = removeHook, Remove = removeHook}
            end

            -- Property Emulator registration.
            if methodName == "AddPropertyEmulator" then
                if #args < 1 then
                    error("mt-api: Invalid argument count")
                end
                local propertyName = args[1]
                if type(propertyName) ~= "string" then
                    error("mt-api: Invalid hook type")
                end
                local originalValue = originalIndex(instance, propertyName)
                local propertyType  = type(originalValue)
                if not propertyEmulatorMeta[instance] then
                    propertyEmulatorMeta[instance] = {}
                end
                if not propertyEmulatorVals[instance] then
                    propertyEmulatorVals[instance] = {}
                end
                propertyEmulatorMeta[instance][propertyName] = {Type = propertyType}
                propertyEmulatorVals[instance][propertyName] = originalValue
                local removeEmulator = function()
                    propertyEmulatorMeta[instance][propertyName] = nil
                    propertyEmulatorVals[instance][propertyName] = nil
                end
                return {remove = removeEmulator, Remove = removeEmulator}
            end

            return originalNamecall(instance, ...)
        end

        -- Process call hooks if the caller check fails.
        if instanceCallHooks[instance] and instanceCallHooks[instance][methodName] then
            local hookData = instanceCallHooks[instance][methodName]
            return hookData["Callback"](originalIndex(instance, methodName), unpack(args))
        end
        if globalCallHooks[methodName] then
            local hookData = globalCallHooks[methodName]
            return hookData["Callback"](instance, originalIndex(instance, methodName), unpack(args))
        end
        return originalNamecall(instance, ...)
    end)

    -- Restore metatable read-only state.
    if exploitType == 0 then
        make_readonly(metaGame)
    elseif exploitType == 2 then
        -- No operation for FullAccess.
    else
        setreadonly(metaGame, true)
    end
end

setupMetaTableHooks()
getgenv().MTAPIMutex = true
